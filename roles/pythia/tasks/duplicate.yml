---

###################################################################################
# Include Var File for alternative Users who's passwords have to be preserved.
# Only if the File exists under var/user_pwd_preservation_{{ duplicate_target_sid }}.yml
# TAG: duplicate
###################################################################################

- name: Include User List for Password preservation
  include_vars:
    file: "vars/user_pwd_preservation_{{ duplicate_target_sid }}.yml"
  when: user_list_for_pwd_preservation_status.stat.exists
  tags:
    - duplicate

- name: Concat the User List for Password preservation
  set_fact:
    duplicate_preserve_pwd_user_list: "{{ duplicate_preserve_pwd_user_list }},{{ additional_duplicate_preserve_pwd_user_list }}"
  when: user_list_for_pwd_preservation_status.stat.exists
  tags:
    - duplicate

###################################################################################
# Before Duplicating a Database we need to check if this Database is already
# existant and running.
# TAG: duplicate
###################################################################################

- name: Check if Source Oracle SID {{ duplicate_source_sid }} already exists
  shell: "grep -w {{ duplicate_source_sid }} /etc/oratab"
  become: true
  register: result
  changed_when: false
  failed_when: "'ERROR' in result.stderr"
  delegate_to: "{{ duplicate_source_host }}"
  run_once: true
  tags:
    - duplicate

- name: Oracle SID to Duplicate does NOT exists
  assert:
    that: duplicate_source_sid in item.stdout
    fail_msg: There is no database {{ duplicate_source_sid }} on the Source System.
    success_msg: Oracle SID {{ duplicate_source_sid }} is registered on the Source System. Proceed with Duplicate.
  become: true
  with_items:
    - "{{ result }}"
  delegate_to: "{{ duplicate_source_host }}"
  run_once: true
  tags:
    - duplicate

- name: Gather Oracle Home used by Source SID {{ duplicate_source_sid }}
  become: true
  shell: "cat /etc/oratab | grep {{ duplicate_source_sid }} | awk -F \":\" {'print$2'}"
  changed_when: false
  args:
    removes: /etc/oratab
  register: duplicate_source_home
  delegate_to: "{{ duplicate_source_host }}"
  run_once: true
  tags:
    - duplicate

- name: Check if Source Database is Open
  become: true
  become_user: "{{ oracle_user }}"
  oracle_sql:
    orahome: "{{ duplicate_source_home.stdout }}"
    sql: "select status from v\\$instance;"
  environment:
    ORACLE_HOME: "{{ duplicate_source_home.stdout }}"
    ORACLE_SID: "{{ duplicate_source_sid }}"
  register: source_db_status
  delegate_to: "{{ duplicate_source_host }}"
  run_once: true
  tags:
    - duplicate

- name: Oracle SID to Duplicate is NOT in OPEN State
  assert:
    that: '"OPEN" | string in item.query_result'
    fail_msg: The Source Database {{ duplicate_source_sid }} is not in OPEN State.
    success_msg: Oracle SID {{ duplicate_source_sid }} is in OPEN State. Proceed with Duplicate.
  become: true
  become_user: "{{ oracle_user }}"
  with_items:
    - "{{ source_db_status }}"
  delegate_to: "{{ duplicate_source_host }}"
  run_once: true
  tags:
    - duplicate

###################################################################################
# We create needed Directory Structure for the Target Database. Before so, we
# check which distinct Filesystems will be needed from the Source Database
# TAG: duplicate
###################################################################################

- name: Gather distinct Datafile Directories from Source Database
  become: true
  become_user: "{{ oracle_user }}"
  shell: "echo -e \"set heading off; \\n set lines 200; \\n set pages 100; \\n set feedback off; \\n select distinct regexp_substr(name,'^.*/') from v\\$datafile;\" | {{ duplicate_source_home.stdout }}/bin/sqlplus -s / as sysdba"  # noqa line-length
  changed_when: false
  environment:
    ORACLE_HOME: "{{ duplicate_source_home.stdout }}"
    ORACLE_SID: "{{ duplicate_source_sid }}"
  register: source_db_datafile_directories
  delegate_to: "{{ duplicate_source_host }}"
  run_once: true
  tags:
    - duplicate

- name: Setting oracle_sid Variable
  set_fact:
    oracle_sid: "{{ duplicate_target_sid }}"
  tags:
    - duplicate

- name: Make distinct Directory List pretty
  set_fact:
    source_db_datafile_directories_pretty: "{{ source_db_datafile_directories.stdout_lines|select( ) }}"
  tags:
    - duplicate

- name: Create DB Directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ oracle_user }}"
    group: "{{ oracle_group }}"
    mode: 0774
  become: true
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  with_items:
    - "{{ sid_directory_list }}"
    - "{{ source_db_datafile_directories_pretty|replace (duplicate_source_sid, duplicate_target_sid) }}"
  when: '"generator" not in item'
  tags:
    - duplicate

###################################################################################
# Check if the specified Oracle Home for the Source is also installed on the
# Target System. It is assumed, that the RDBMS Installation Path is the same
# for Source and Target side.
# TAG: duplicate
###################################################################################

- name: Get Oracle Inventory Location on Target Server
  shell: "grep -w inventory_loc /etc/oraInst.loc | awk -F \"=\" {'print$2'}"
  changed_when: false
  become: true
  register: oracle_inventory
  failed_when: "'ERROR' in result.stderr"
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  tags:
    - duplicate

- name: Oracle RDBMS is not installed on Target Host
  assert:
    that: oracle_inventory.stdout|length > 0
    fail_msg: It seems, that there is no Oracle Software installed on Target Host {{ duplicate_target_host }}
    success_msg: Oracle Software seem to be installed on Target Host {{ duplicate_target_host }}. Proceed with Duplicate.
  become: true
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  tags:
    - duplicate

- name: Check if Oracle Home specified is also installed on the Target Server
  shell: "grep -w {{ duplicate_source_home.stdout }} {{ oracle_inventory.stdout }}/ContentsXML/inventory.xml"
  changed_when: false
  become: true
  register: result
  failed_when: "'ERROR' in result.stderr"
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  tags:
    - duplicate

- name: Oracle Home {{ duplicate_source_home.stdout }} is registered in Inventory
  assert:
    that: duplicate_source_home.stdout in item.stdout
    fail_msg: "The Oracle Home {{ duplicate_source_home.stdout }} is not registered in Inventory"
    success_msg: "Oracle Home {{ duplicate_source_home.stdout }} found."
  become: true
  with_items:
    - "{{ result }}"
  tags:
    - duplicate

###################################################################################
# Before Duplicating a Database we need to check if the Target System has a running
# Database and if so, this database will be removed before starting the duplicate.
# This will be controlled by the variable duplicate_remove_target
# TAG: duplicate
###################################################################################

- name: Check if Target Database is Open
  become: true
  become_user: "{{ oracle_user }}"
  oracle_sql:
    orahome: "{{ duplicate_source_home.stdout }}"
    sql: "select status from v\\$instance;"
  environment:
    ORACLE_HOME: "{{ duplicate_source_home.stdout }}"
    ORACLE_SID: "{{ duplicate_target_sid }}"
  register: target_db_status
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  tags:
    - duplicate

- name: Oracle SID on Target System is in OPEN State
  assert:
    that: '"OPEN" | string not in item.query_result'
    fail_msg: "The Source Database {{ duplicate_target_sid }} is in OPEN State. If you want to remove it prior to duplication, specify so in the duplicate_remove_target variable!"  # noqa line-length
    success_msg: "Oracle SID {{ duplicate_target_sid }} is not in OPEN State. Proceed with Duplicate."
  become: true
  become_user: "{{ oracle_user }}"
  when: (not duplicate_remove_target)
  with_items:
    - "{{ target_db_status }}"
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  tags:
    - duplicate

- name: Backup current User Passwords for setting them later
  become: true
  become_user: "{{ oracle_user }}"
  shell: "echo -e \"set heading off; \\n set lines 500; \\n set feedback off; \\n spool {{ remote_sql_stage_directory }}/preserve_passwords_{{ duplicate_target_sid }}.sql; \\n select 'alter user ' || name || ' identified by values ''' || spare4 || ''';' from user\\$ where name in ({{ duplicate_preserve_pwd_user_list }}) and spare4 is not null;\" | {{ duplicate_source_home.stdout }}/bin/sqlplus -s / as sysdba"  # noqa line-length
  changed_when: true
  environment:
    ORACLE_HOME: "{{ duplicate_source_home.stdout }}"
    ORACLE_SID: "{{ duplicate_target_sid }}"
  register: target_passwords
  with_items:
    - "{{ target_db_status }}"
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  when: (duplicate_preserve_passwords) and ("OPEN" | string in item.query_result)
  tags:
    - duplicate

- name: Gather Controlfiles from running Target Database
  become: true
  become_user: "{{ oracle_user }}"
  oracle_sql:
    orahome: "{{ duplicate_source_home.stdout }}"
    sql: "select value from v\\$parameter where name = 'control_files';"
  environment:
    ORACLE_HOME: "{{ duplicate_source_home.stdout }}"
    ORACLE_SID: "{{ duplicate_target_sid }}"
  register: target_controlfiles
  with_items:
    - "{{ target_db_status }}"
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  when: (duplicate_remove_target) and ("OPEN" | string in item.query_result)
  tags:
    - duplicate

- name: Gather Datafiles from running Target Database
  become: true
  become_user: "{{ oracle_user }}"
  oracle_sql:
    orahome: "{{ duplicate_source_home.stdout }}"
    sql: "select file_name from dba_data_files;"
  environment:
    ORACLE_HOME: "{{ duplicate_source_home.stdout }}"
    ORACLE_SID: "{{ duplicate_target_sid }}"
  register: target_datafiles
  with_items:
    - "{{ target_db_status }}"
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  when: (duplicate_remove_target) and ("OPEN" | string in item.query_result)
  tags:
    - duplicate

- name: Gather Tempfiles from running Target Database
  become: true
  become_user: "{{ oracle_user }}"
  oracle_sql:
    orahome: "{{ duplicate_source_home.stdout }}"
    sql: "select file_name from dba_temp_files;"
  environment:
    ORACLE_HOME: "{{ duplicate_source_home.stdout }}"
    ORACLE_SID: "{{ duplicate_target_sid }}"
  register: target_tempfiles
  with_items:
    - "{{ target_db_status }}"
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  when: (duplicate_remove_target) and ("OPEN" | string in item.query_result)
  tags:
    - duplicate

- name: Gather Redologs from running Target Database
  become: true
  become_user: "{{ oracle_user }}"
  oracle_sql:
    orahome: "{{ duplicate_source_home.stdout }}"
    sql: "select member from v\\$logfile;"
  environment:
    ORACLE_HOME: "{{ duplicate_source_home.stdout }}"
    ORACLE_SID: "{{ duplicate_target_sid }}"
  register: target_redologs
  with_items:
    - "{{ target_db_status }}"
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  when: (duplicate_remove_target) and ("OPEN" | string in item.query_result)
  tags:
    - duplicate

- name: Dropping Target Database {{ duplicate_target_sid }}
  become: true
  become_user: "{{ oracle_user }}"
  shell: "echo -e \"shutdown abort; \\n startup mount exclusive restrict; \\n drop database;\" | {{ duplicate_source_home.stdout }}/bin/sqlplus -s / as sysdba"
  environment:
    ORACLE_HOME: "{{ duplicate_source_home.stdout }}"
    ORACLE_SID: "{{ duplicate_target_sid }}"
  with_items:
    - "{{ target_db_status }}"
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  when: (duplicate_remove_target) and ("OPEN" | string in item.query_result)
  tags:
    - duplicate

###################################################################################
# Check the Listener and TNS Configuration on Source and Target Side
# TAG: duplicate
###################################################################################

- name: Gather Listeners running on Source System Oracle Home {{ duplicate_source_home.stdout }}
  become: true
  become_user: "{{ oracle_user }}"
  shell: "ps -ef | grep {{ duplicate_source_home.stdout }} | grep tnslsnr | grep {{ listener_prefix }}{{ duplicate_source_sid }} | grep -v grep | awk {'print$9'}"  # noqa line-length
  changed_when: false
  delegate_to: "{{ duplicate_source_host }}"
  run_once: true
  register: duplicate_source_listener
  tags:
    - duplicate

- name: Listener is running on Source System {{ duplicate_source_host }}
  assert:
    that: duplicate_source_listener.stdout|length > 0
    fail_msg: "There seems no Listener running on Source Host {{ duplicate_source_host }}"
    success_msg: "Listener is running. Proceed with duplicate."
  become: true
  tags:
    - duplicate

- name: Gather Listeners running on Target System Oracle Home {{ duplicate_source_home.stdout }}
  become: true
  become_user: "{{ oracle_user }}"
  shell: "ps -ef | grep {{ duplicate_source_home.stdout }} | grep tnslsnr | grep {{ listener_prefix }}{{ duplicate_target_sid }} | grep -v grep | awk {'print$9'}"  # noqa line-length
  changed_when: false
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  register: duplicate_target_listener
  tags:
    - duplicate

- name: Create Listener {{ listener_prefix }}{{ duplicate_target_sid }} on Port {{ listener_port }}
  become: true
  become_user: "{{ oracle_user }}"
  template:
    src: "{{ role_path }}/templates/duplicate_target_listener.ora"
    dest: "{{ duplicate_source_home.stdout }}/network/admin/listener.ora"
    mode: 0755
    backup: true
  when: (duplicate_target_listener.stdout_lines|length == 0)
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  tags:
    - duplicate

- name: Start Listener {{ listener_prefix }}{{ duplicate_target_sid }} on Target System
  become: true
  become_user: "{{ oracle_user }}"
  shell: "{{ duplicate_source_home.stdout }}/bin/lsnrctl start {{ listener_prefix }}{{ duplicate_target_sid }}"
  environment:
    ORACLE_HOME: "{{ duplicate_source_home.stdout }}"
    ORACLE_SID: "{{ duplicate_target_sid }}"
  when: (duplicate_target_listener.stdout_lines|length == 0)
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  tags:
    - duplicate

- name: Check if TNSNAMES Entry for Source Database is in Targets tnsnames.ora
  become: true
  become_user: "{{ oracle_user }}"
  shell: "grep -w {{ duplicate_source_sid }} {{ duplicate_source_home.stdout }}/network/admin/tnsnames.ora"
  changed_when: false
  failed_when: "'ERROR' in result.stderr"
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  register: duplicate_target_tnsnames
  tags:
    - duplicate

- name: Create tnsnames.ora entry for Source Database {{ duplicate_source_sid }} on Target Host {{ duplicate_target_host }}
  become: true
  become_user: "{{ oracle_user }}"
  blockinfile:
    dest: "{{ duplicate_source_home.stdout }}/network/admin/tnsnames.ora"
    block: "{{ lookup('template', '{{ role_path }}/templates/tnsnames_duplicate_source.ora') }}"
    backup: true
    create: true
    marker: "# Duplicate Source Database"
    mode: 0755
  when: (duplicate_target_tnsnames.stdout|length == 0)
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  tags:
    - duplicate

- name: Check if TNSNAMES Entry for Target Database is in Targets tnsnames.ora
  become: true
  become_user: "{{ oracle_user }}"
  shell: "grep -w {{ duplicate_target_sid }} {{ duplicate_source_home.stdout }}/network/admin/tnsnames.ora"
  changed_when: false
  failed_when: "'ERROR' in result.stderr"
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  register: duplicate_target_tnsnames
  tags:
    - duplicate

- name: Create tnsnames.ora entry for Target Database {{ duplicate_target_sid }} on Target Host {{ duplicate_target_host }}
  become: true
  become_user: "{{ oracle_user }}"
  blockinfile:
    dest: "{{ duplicate_source_home.stdout }}/network/admin/tnsnames.ora"
    block: "{{ lookup('template', '{{ role_path }}/templates/tnsnames_duplicate_target.ora') }}"
    backup: true
    create: true
    marker: "# Duplicate Target Database"
    mode: 0755
  when: (duplicate_target_tnsnames.stdout|length == 0)
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  tags:
    - duplicate

- name: Try TNSPING to Source Listener from Target Host {{ duplicate_target_host }}
  become: true
  become_user: "{{ oracle_user }}"
  shell: "{{ duplicate_source_home.stdout }}/bin/tnsping {{ duplicate_source_sid }}"
  changed_when: false
  environment:
    ORACLE_HOME: "{{ duplicate_source_home.stdout }}"
    ORACLE_SID: "{{ duplicate_source_sid }}"
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  tags:
    - duplicate

###################################################################################
# Create init.ora and copy Password File
# TAG: duplicate
###################################################################################

- name: Setup to takeover SPFILE from Source or not
  set_fact:
    duplicate_clone_spfile: "preservespfile"
  when: duplicate_preserve_parameter == 'target'
  tags:
    - duplicate

- name: Create Duplicate init.ora File to start Instance later
  become: true
  become_user: "{{ oracle_user }}"
  template:
    src: "{{ role_path }}/templates/initduplicate.ora"
    dest: "{{ duplicate_source_home.stdout }}/dbs/init{{ duplicate_target_sid }}.ora"
    mode: 0755
    backup: true
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  tags:
    - duplicate

- name: Fetching Oracle Password File from Source Database {{ duplicate_source_sid }}
  become: true
  become_user: "{{ oracle_user }}"
  fetch:
    src: "{{ duplicate_source_home.stdout }}/dbs/orapw{{ duplicate_source_sid }}"
    dest: "{{ role_path }}/files/orapw{{ duplicate_source_sid }}"
    flat: true
  delegate_to: "{{ duplicate_source_host }}"
  run_once: true
  tags:
    - duplicate

- name: Copy Oracle Password File from Source Database {{ duplicate_source_sid }} to Target Host {{ duplicate_target_host }}
  become: true
  become_user: "{{ oracle_user }}"
  copy:
    src: "{{ role_path }}/files/orapw{{ duplicate_source_sid }}"
    dest: "{{ duplicate_source_home.stdout }}/dbs/orapw{{ duplicate_target_sid }}"
    remote_src: false
    owner: "{{ oracle_user }}"
    group: "{{ oracle_group }}"
    mode: 0640
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  tags:
    - duplicate

- name: Cleanup Password File on localhost
  file:
    path: "{{ role_path }}/files/orapw{{ duplicate_source_sid }}"
    state: absent
  delegate_to: "localhost"
  run_once: true
  tags:
    - duplicate

- name: Adding Entry for Target SID {{ duplicate_target_sid }} in oratab
  lineinfile:
    name: /etc/oratab
    line: "{{ duplicate_target_sid }}:{{ duplicate_source_home.stdout }}:N"
    state: present
  become: true
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  tags:
    - duplicate

###################################################################################
# During Duplicate, the archivelog Backup needsd to be changed. Archive Backups
# should still work but should not delete any Archivelogs during Duplicate.
# This will only happen, when the according Par-Files of the Archivelog Backup
# can be found under $ORACLE_HOME/tds_rman
# See Issue #125 for more details
# TAG: duplicate
###################################################################################

- name: Stat if the Parfile for Archivelog Backups exist
  become: true
  stat:
    path: "{{ duplicate_source_home.stdout }}/tds_rman/rman_arc.par"
  register: archive_parfile_status
  delegate_to: "{{ duplicate_source_host }}"
  run_once: true
  tags:
    - duplicate

- name: Backup Archivelog Backup Parameterfile from Source Database
  become: true
  copy:
    src: "{{ duplicate_source_home.stdout }}/tds_rman/rman_arc.par"
    dest: "{{ duplicate_source_home.stdout }}/tds_rman/rman_arc.par_backupbeforeduplicate"
    remote_src: true
    mode: 0666
  delegate_to: "{{ duplicate_source_host }}"
  run_once: true
  when: (archive_parfile_status.stat.exists)
  tags:
    - duplicate

- name: Change Archivelog Backup Parameterfile on Source Side to prevent Archivelog deletion
  become: true
  become_user: "{{ oracle_user }}"
  template:
    src: "{{ role_path }}/templates/rman_arc.par.j2"
    dest: "{{ duplicate_source_home.stdout }}/tds_rman/rman_arc.par"
    mode: 0755
  register: rman_arc_parfile_backup
  delegate_to: "{{ duplicate_source_host }}"
  run_once: true
  when: (archive_parfile_status.stat.exists)
  tags:
    - duplicate

###################################################################################
# Start Target Instance and start duplicate
# TAG: duplicate
###################################################################################

- name: Check if SPFILE currently exists on Target
  become: true
  become_user: "{{ oracle_user }}"
  stat:
    path: "{{ duplicate_source_home.stdout }}/dbs/spfile{{ duplicate_target_sid }}.ora"
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  register: spfile_exists
  tags:
    - duplicate

- name: Backup Current SPFILE from Target Database
  become: true
  become_user: "{{ oracle_user }}"
  copy:
    src: "{{ duplicate_source_home.stdout }}/dbs/spfile{{ duplicate_target_sid }}.ora"
    dest: "{{ duplicate_source_home.stdout }}/dbs/spfile{{ duplicate_target_sid }}.ora_backupbeforeduplicate"
    remote_src: true
    mode: 0640
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  when: (spfile_exists.stat.exists)
  tags:
    - duplicate

- name: Start Databases Instance {{ duplicate_target_sid }}
  become: true
  become_user: "{{ oracle_user }}"
  shell: "echo startup nomount force pfile={{ duplicate_source_home.stdout }}/dbs/init{{ duplicate_target_sid }}.ora | {{ duplicate_source_home.stdout }}/bin/sqlplus -s / as sysdba"  # noqa line-length
  changed_when: result.rc == 0
  register: result
  failed_when: "'ERROR' in result.stderr"
  environment:
    ORACLE_HOME: "{{ duplicate_source_home.stdout }}"
    ORACLE_SID: "{{ duplicate_target_sid }}"
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  tags:
    - duplicate

- name: Create RMAN Commandfile for duplicate
  become: true
  become_user: "{{ oracle_user }}"
  template:
    src: "{{ role_path }}/templates/rman_duplicate_{{ duplicate_clone_spfile }}.par"
    dest: "{{ remote_stage_directory }}/rman_duplicate.par"
    mode: 0755
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  tags:
    - duplicate

###################################################################################
# The Duplicate runs in a Block to be able to "rescue" on fail. On Rescue, the
# maybe backed up rman_arc.par File will be copied back.
# TAG: duplicate
###################################################################################

- name: Starting Duplicate
  block:
    - name: Run RMAN and start duplicate
      become: true
      become_user: "{{ oracle_user }}"
      shell: "{{ duplicate_source_home.stdout }}/bin/rman target sys/'{{ lookup('vars', 'vault_sys_' + duplicate_source_sid) }}'@{{ duplicate_source_sid }} auxiliary sys/'{{ lookup('vars', 'vault_sys_' + duplicate_source_sid) }}'@{{ duplicate_target_sid }} cmdfile={{ remote_stage_directory }}/rman_duplicate.par log={{ remote_stage_directory }}/duplicate_{{ duplicate_target_sid }}.log"  # noqa line-length
      environment:
        ORACLE_HOME: "{{ duplicate_source_home.stdout }}"
        ORACLE_SID: "{{ duplicate_target_sid }}"
      delegate_to: "{{ duplicate_target_host }}"
      run_once: true
      async: "{{ duplicate_max_runtime }}"
      poll: 360
      no_log: true
      tags:
        - duplicate
  always:
    - name: Restore original RMAN Archive Backup Parameterfile on Source System
      become: true
      copy:
        src: "{{ duplicate_source_home.stdout }}/tds_rman/rman_arc.par_backupbeforeduplicate"
        dest: "{{ duplicate_source_home.stdout }}/tds_rman/rman_arc.par"
        mode: 0666
        remote_src: true
      delegate_to: "{{ duplicate_source_host }}"
      run_once: true
      when: (archive_parfile_status.stat.exists)
      tags:
        - duplicate

###################################################################################
# If Parameters should be preserved from existing Target Database, then let's
# restore the old configuration now.
# TAG: duplicate
###################################################################################

- name: Shutdown Target Database for restoring the original SPFILE
  become: true
  become_user: "{{ oracle_user }}"
  oracle_sql:
    orahome: "{{ duplicate_source_home.stdout }}"
    sql: "shutdown immediate;"
  environment:
    ORACLE_HOME: "{{ duplicate_source_home.stdout }}"
    ORACLE_SID: "{{ duplicate_target_sid }}"
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  when: (duplicate_preserve_parameter == 'target') and (spfile_exists.stat.exists)
  tags:
    - duplicate

- name: Restore original SPFILE from Target Database
  become: true
  become_user: "{{ oracle_user }}"
  copy:
    src: "{{ duplicate_source_home.stdout }}/dbs/spfile{{ duplicate_target_sid }}.ora_backupbeforeduplicate"
    dest: "{{ duplicate_source_home.stdout }}/dbs/spfile{{ duplicate_target_sid }}.ora"
    mode: 0640
    remote_src: true
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  when: (duplicate_preserve_parameter == 'target') and (spfile_exists.stat.exists)
  tags:
    - duplicate

- name: Startup Target Database for restoring the original SPFILE
  become: true
  become_user: "{{ oracle_user }}"
  oracle_sql:
    orahome: "{{ duplicate_source_home.stdout }}"
    sql: "startup;"
  environment:
    ORACLE_HOME: "{{ duplicate_source_home.stdout }}"
    ORACLE_SID: "{{ duplicate_target_sid }}"
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  when: (duplicate_preserve_parameter == 'target') and (spfile_exists.stat.exists)
  tags:
    - duplicate

- name: Remove Backup of SPFILE
  become: true
  become_user: "{{ oracle_user }}"
  file:
    path: "{{ duplicate_source_home.stdout }}/dbs/spfile{{ duplicate_target_sid }}.ora_backupbeforeduplicate"
    state: absent
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  when: (duplicate_preserve_parameter == 'target') and (spfile_exists.stat.exists)
  tags:
    - duplicate

###################################################################################
# We are setting the backed up Passwords of the original Target Database here
# TAG: duplicate
###################################################################################

- name: Preprocess Scripts for execution
  become: true
  become_user: "{{ oracle_user }}"
  lineinfile:
    path: "{{ remote_sql_stage_directory }}/preserve_passwords_{{ duplicate_target_sid }}.sql"
    line: "exit;"
    state: present
    create: true
    mode: 0774
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  when: duplicate_preserve_passwords|bool
  tags:
    - duplicate

- name: Restoring Passwords of original Target Database
  become: true
  become_user: "{{ oracle_user }}"
  shell: "{{ duplicate_source_home.stdout }}/bin/sqlplus / as sysdba @{{ remote_sql_stage_directory }}/preserve_passwords_{{ duplicate_target_sid }}.sql"
  environment:
    ORACLE_HOME: "{{ duplicate_source_home.stdout }}"
    ORACLE_SID: "{{ duplicate_target_sid }}"
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  when: duplicate_preserve_passwords|bool
  tags:
    - duplicate

- name: Cleanup Password Scripts
  become: true
  file:
    path: "{{ remote_sql_stage_directory }}//preserve_passwords_{{ duplicate_target_sid }}.sql"
    state: absent
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  when: duplicate_preserve_passwords|bool
  tags:
    - duplicate

###################################################################################
# We check if there are SQL Scripts to be executed and execute them to the
# newly created Target Database
# TAG: duplicate
###################################################################################

- name: Copy Scripts to {{ remote_sql_stage_directory }}
  copy:
    src: "{{ local_sql_stage_directory }}/duplicate_{{ duplicate_source_sid }}_post.sql"
    dest: "{{ remote_sql_stage_directory }}"
    owner: "{{ oracle_user }}"
    group: "{{ oracle_group }}"
    mode: 0755
  become: true
  become_user: "{{ oracle_user }}"
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  when: duplicate_run_post_script|bool
  tags:
    - duplicate

- name: Preprocess Scripts for execution
  become: true
  become_user: "{{ oracle_user }}"
  lineinfile:
    path: "{{ remote_sql_stage_directory }}/duplicate_{{ duplicate_source_sid }}_post.sql"
    line: "exit;"
    state: present
    create: true
    mode: 0774
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  when: duplicate_run_post_script|bool
  tags:
    - duplicate

- name: Executing SQL Scripts
  become: true
  become_user: "{{ oracle_user }}"
  shell: "{{ duplicate_source_home.stdout }}/bin/sqlplus / as sysdba @{{ remote_sql_stage_directory }}/duplicate_{{ duplicate_source_sid }}_post.sql"
  environment:
    ORACLE_HOME: "{{ duplicate_source_home.stdout }}"
    ORACLE_SID: "{{ duplicate_target_sid }}"
  register: script_output
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  when: duplicate_run_post_script|bool
  tags:
    - duplicate

###################################################################################
# Show the SQL Script Output if the scriptoutput Variable is specified.
# TAG: duplicate
###################################################################################

- name: SQL Script Output
  debug:
    msg: "{{ script_output }}"
  when: (sqlscriptoutput|bool and duplicate_run_post_script|bool)
  tags:
    duplicate

###################################################################################
# Cleanup the Scripts from the Remote Staging Area
# TAG: duplicate
###################################################################################

- name: Cleanup Scripts
  become: true
  file:
    path: "{{ remote_sql_stage_directory }}/duplicate_{{ duplicate_source_sid }}_post.sql"
    state: absent
  delegate_to: "{{ duplicate_target_host }}"
  run_once: true
  when: duplicate_run_post_script|bool
  tags:
    - duplicate
